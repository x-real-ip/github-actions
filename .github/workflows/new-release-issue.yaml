name: Check release

on:
  workflow_call:
    inputs:
      name:
        description: "Friendly name of the project/image."
        required: true
        type: string
      type:
        description: "What to check: 'release' or 'image'."
        required: true
        type: string
      target:
        description:
          "Target repo (org/repo) for releases or ghcr.io/org/image for images."
        required: true
        type: string
      bump:
        description: "Enable PR bumping"
        required: false
        default: false
        type: boolean
      bump_type:
        description: "What to bump: containerfile, kustomize"
        required: false
        default: "containerfile"
        type: string

jobs:
  check-release:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      packages: read
    outputs:
      latest: ${{ steps.issue_check.outputs.latest }}
      exists: ${{ steps.issue_check.outputs.exists }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
      NAME: ${{ inputs.name }}
      ASSIGNEES: x-real-ip
      LABELS: update
      TYPE: ${{ inputs.type }}
      TARGET: ${{ inputs.target }}
    steps:
      - name: Get latest release
        id: get_release
        if: env.TYPE == 'release'
        run: |
          RELEASE_API="https://api.github.com/repos/$TARGET/releases/latest"
          response=$(curl -s "$RELEASE_API")
          latest=$(echo "$response" | jq -r .tag_name)
          url=$(echo "$response" | jq -r .html_url)
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Get latest image tag
        id: get_image
        if: env.TYPE == 'image'
        run: |
          IMAGE_PATH="${TARGET#ghcr.io/}"

          # Get registry token for the package
          TOKEN=$(curl -s \
            -u "${{ github.actor }}:${GH_TOKEN}" \
            "https://ghcr.io/token?scope=repository:${IMAGE_PATH}:pull" \
            | jq -r .token)

          # Get list of tags
          tags=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://ghcr.io/v2/${IMAGE_PATH}/tags/list" \
            | jq -r '.tags | .[]')

          if [ -z "$tags" ]; then
            echo "No tags found for $IMAGE_PATH"
            exit 1
          fi

          # Filter out unwanted ones and pick latest semver
          latest=$(echo "$tags" \
            | grep -Ev 'alpha|beta|dev|rc|latest|next|master' \
            | sort -V \
            | tail -n1)

          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Check if issue already exists
        id: issue_check
        run: |
          latest=$([[ "$TYPE" == "release" ]] && echo "${{ steps.get_release.outputs.latest }}" || echo "${{ steps.get_image.outputs.latest }}")
          exists=$(gh issue list \
            --repo "$GH_REPO" \
            --state all \
            --search "$NAME $TYPE $latest" \
            --json number \
            --jq '.[0].number')
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "exists=$exists" >> $GITHUB_OUTPUT

      - name: Create issue if new
        if: steps.issue_check.outputs.exists == ''
        run: |
          latest=${{ steps.issue_check.outputs.latest }}
          url=${{ steps.get_release.outputs.url || '' }}

          BODY="### New $NAME $TYPE

          A new $NAME $TYPE is available: **$latest**

          [View release notes]($url)"

          gh issue create \
            --title "New $NAME $TYPE: $latest" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY"

  bump-version:
    needs: check-release
    if:
      ${{ inputs.bump && inputs.bump_type == 'containerfile' &&
      needs.check-release.outputs.exists == '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ secrets.PAT }}
    steps:
      - uses: actions/checkout@v4

      - name: Bump version in Containerfile
        id: bump
        run: |
          latest="${{ needs.check-release.outputs.latest }}"
          echo "Latest version: $latest"

          # Replace all FROM lines with new version
          sed -i -E "s#^(FROM .+):[0-9A-Za-z._-]+#\1:${latest}#" Containerfile

          # Check if file changed
          if git diff --quiet; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.bump.outputs.no_changes == 'false'
        id: commit
        run: |
          latest="${{ needs.check-release.outputs.latest }}"
          branch="bump-${{ inputs.name }}-${latest}"
          branch="${branch// /-}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create branch from remote if exists, otherwise new branch
          git fetch origin "$branch" || true
          git checkout -B "$branch" origin/"$branch" || git checkout -B "$branch"

          git add Containerfile
          git commit -m "Bump ${{ inputs.name }} to $latest" || echo "No changes to commit"
          git push --force origin "$branch"

      - name: Create pull request
        if: steps.bump.outputs.no_changes == 'false'
        run: |
          latest="${{ needs.check-release.outputs.latest }}"
          branch="bump-${{ inputs.name }}-${latest}"
          branch="${branch// /-}"

          gh pr create \
            --title "Bump ${{ inputs.name }} to $latest" \
            --body "Automated bump of ${{ inputs.name }} to $latest" \
            --base main \
            --head "$branch"
