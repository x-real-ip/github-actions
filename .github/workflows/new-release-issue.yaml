name: Check release

on:
  workflow_call:
    inputs:
      name:
        description: "Friendly name of the project/image."
        required: true
        type: string
      type:
        description: "What to check: 'release' or 'image'."
        required: true
        type: string
      target:
        description:
          "Target repo (org/repo) for releases or ghcr.io/org/image for images."
        required: true
        type: string
      bump:
        description: "Enable PR bumping"
        required: false
        default: false
        type: boolean
      bump_type:
        description: "What to bump: containerfile, kustomize"
        required: false
        default: "containerfile"
        type: string
      image:
        description: "Image name(s) to update in kustomization (space-separated)."
        required: false
        default: ""
        type: string
    secrets:
      PAT:
        description: "Personal access token for PR creation"
        required: false

jobs:
  check-release:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      packages: read
    outputs:
      latest: ${{ steps.issue_check.outputs.latest }}
      exists: ${{ steps.issue_check.outputs.exists }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
      NAME: ${{ inputs.name }}
      ASSIGNEES: x-real-ip
      LABELS: update
      TYPE: ${{ inputs.type }}
      TARGET: ${{ inputs.target }}
    steps:
      - name: Get latest release
        id: get_release
        if: env.TYPE == 'release'
        run: |
          RELEASE_API="https://api.github.com/repos/$TARGET/releases/latest"
          response=$(curl -s "$RELEASE_API")
          latest=$(echo "$response" | jq -r .tag_name)
          url=$(echo "$response" | jq -r .html_url)
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Get latest image tag
        id: get_image
        if: env.TYPE == 'image'
        run: |
          # Extract org/user and image from TARGET (ghcr.io/org/image)
          TARGET_NO_PREFIX="${TARGET#ghcr.io/}"   # remove ghcr.io/
          OWNER="${TARGET_NO_PREFIX%%/*}"         # owner = part before first /
          IMAGE="${TARGET_NO_PREFIX#*/}"          # image = part after first /

          echo "Owner: $OWNER, Image: $IMAGE"

          # Try /orgs/ first
          resp=$(gh api -H "Accept: application/vnd.github.v3+json" \
            "/orgs/$OWNER/packages/container/$IMAGE/versions" 2>/dev/null) || true

          # If empty or Not Found, fallback to /users/
          if [ -z "$resp" ] || [[ "$resp" == *"Not Found"* ]]; then
            resp=$(gh api -H "Accept: application/vnd.github.v3+json" \
              "/users/$OWNER/packages/container/$IMAGE/versions")
          fi

          # Extract all tags
          tags=$(echo "$resp" | jq -r '.[].metadata.container.tags[]')

          if [ -z "$tags" ]; then
            echo "No tags found for $TARGET"
            exit 1
          fi

          # Filter unwanted tags, pick latest semver
          latest=$(echo "$tags" \
            | grep -Ev 'alpha|beta|dev|rc|latest|next|master|sha|commit|test' \
            | sort -Vr \
            | head -n1)

          if [ -z "$latest" ]; then
            echo "No suitable tags found for $TARGET after filtering"
            exit 1
          fi

          echo "Latest tag: $latest"
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Check if issue already exists
        id: issue_check
        run: |
          latest=$([[ "$TYPE" == "release" ]] && echo "${{ steps.get_release.outputs.latest }}" || echo "${{ steps.get_image.outputs.latest }}")
          exists=$(gh issue list \
            --repo "$GH_REPO" \
            --state all \
            --search "$NAME $TYPE $latest" \
            --json number \
            --jq '.[0].number')
          echo "latest=$latest" >> $GITHUB_OUTPUT
          echo "exists=$exists" >> $GITHUB_OUTPUT

      - name: Create issue if new
        if: steps.issue_check.outputs.exists == ''
        run: |
          latest=${{ steps.issue_check.outputs.latest }}
          url=${{ steps.get_release.outputs.url || '' }}

          BODY="### New $NAME $TYPE

          A new $NAME $TYPE is available: **$latest**

          [View release notes]($url)"

          gh issue create \
            --title "New $NAME $TYPE: $latest" \
            --assignee "$ASSIGNEES" \
            --label "$LABELS" \
            --body "$BODY"

  bump-version:
    needs: check-release
    if: inputs.bump && needs.check-release.outputs.exists == ''
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      ASSIGNEES: x-real-ip
      LABELS: update
    steps:
      - uses: actions/checkout@v4

      - name: Bump version in Containerfile
        if: inputs.bump_type == 'containerfile'
        run: |
          latest="${{ needs.check-release.outputs.latest }}"
          echo "Latest version: $latest"
          sed -i -E "s#^(FROM .+):[0-9A-Za-z._-]+#\1:${latest}#" Containerfile

      - name: Bump version in Kustomization
        if: inputs.bump_type == 'kustomize'
        uses: imranismail/setup-kustomize@v2
      - run: |
          latest="${{ needs.check-release.outputs.latest }}"
          cd manifests/${{ inputs.name }}/overlay
          for image in ${{ inputs.image }}; do
            echo "Updating $image to version $latest"
            kustomize edit set image $image=$image:$latest
          done

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PAT }}
          branch:
            bump-${{ inputs.name }}-${{ needs.check-release.outputs.latest }}
          title:
            Bump ${{ inputs.name }} to ${{ needs.check-release.outputs.latest }}
          body:
            Automated bump of ${{ inputs.name }} to ${{
            needs.check-release.outputs.latest }}
          commit-message:
            Bump ${{ inputs.name }} to ${{ needs.check-release.outputs.latest }}
          assignees: ${{ env.ASSIGNEES }}
          labels: ${{ env.LABELS }}
